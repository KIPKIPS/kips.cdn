THREE.EffectComposer=function(renderer,renderTarget){if(this.renderer=renderer,void 0===renderTarget){var parameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat},size=renderer.getSize(new THREE.Vector2);this._pixelRatio=renderer.getPixelRatio(),this._width=size.width,this._height=size.height,(renderTarget=new THREE.WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,parameters)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=renderTarget.width,this._height=renderTarget.height;this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),void 0===THREE.ShaderPass&&console.error("THREE.EffectComposer relies on THREE.ShaderPass"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader),this.clock=new THREE.Clock},Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=tmp},addPass:function(pass){this.passes.push(pass),pass.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)},insertPass:function(pass,index){this.passes.splice(index,0,pass),pass.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)},removePass:function(pass){const index=this.passes.indexOf(pass);-1!==index&&this.passes.splice(index,1)},isLastEnabledPass:function(passIndex){for(var i=passIndex+1;i<this.passes.length;i++)if(this.passes[i].enabled)return!1;return!0},render:function(deltaTime){void 0===deltaTime&&(deltaTime=this.clock.getDelta());var currentRenderTarget=this.renderer.getRenderTarget(),maskActive=!1,pass,i,il=this.passes.length;for(i=0;i<il;i++)if(!1!==(pass=this.passes[i]).enabled){if(pass.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(i),pass.render(this.renderer,this.writeBuffer,this.readBuffer,deltaTime,maskActive),pass.needsSwap){if(maskActive){var context=this.renderer.getContext(),stencil=this.renderer.state.buffers.stencil;stencil.setFunc(context.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,deltaTime),stencil.setFunc(context.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==THREE.MaskPass&&(pass instanceof THREE.MaskPass?maskActive=!0:pass instanceof THREE.ClearMaskPass&&(maskActive=!1))}this.renderer.setRenderTarget(currentRenderTarget)},reset:function(renderTarget){if(void 0===renderTarget){var size=this.renderer.getSize(new THREE.Vector2);this._pixelRatio=this.renderer.getPixelRatio(),this._width=size.width,this._height=size.height,(renderTarget=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(width,height){this._width=width,this._height=height;var effectiveWidth=this._width*this._pixelRatio,effectiveHeight=this._height*this._pixelRatio;this.renderTarget1.setSize(effectiveWidth,effectiveHeight),this.renderTarget2.setSize(effectiveWidth,effectiveHeight);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(effectiveWidth,effectiveHeight)},setPixelRatio:function(pixelRatio){this._pixelRatio=pixelRatio,this.setSize(this._width,this._height)}}),THREE.Pass=function(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1},Object.assign(THREE.Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),THREE.Pass.FullScreenQuad=function(){var camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),geometry=new THREE.PlaneBufferGeometry(2,2),FullScreenQuad=function(material){this._mesh=new THREE.Mesh(geometry,material)};return Object.defineProperty(FullScreenQuad.prototype,"material",{get:function(){return this._mesh.material},set:function(value){this._mesh.material=value}}),Object.assign(FullScreenQuad.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(renderer){renderer.render(this._mesh,camera)}}),FullScreenQuad}();