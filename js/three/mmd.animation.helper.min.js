!function(){class MMDAnimationHelper{constructor(params={}){this.meshes=[],this.camera=null,this.cameraTarget=new THREE.Object3D,this.cameraTarget.name="target",this.audio=null,this.audioManager=null,this.objects=new WeakMap,this.configuration={sync:void 0===params.sync||params.sync,afterglow:void 0!==params.afterglow?params.afterglow:0,resetPhysicsOnLoop:void 0===params.resetPhysicsOnLoop||params.resetPhysicsOnLoop,pmxAnimation:void 0!==params.pmxAnimation&&params.pmxAnimation},this.enabled={animation:!0,ik:!0,grant:!0,physics:!0,cameraAnimation:!0},this.onBeforePhysics=function(){},this.sharedPhysics=!1,this.masterPhysics=null}add(object,params={}){if(object.isSkinnedMesh)this._addMesh(object,params);else if(object.isCamera)this._setupCamera(object,params);else{if("Audio"!==object.type)throw new Error("THREE.MMDAnimationHelper.add: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.");this._setupAudio(object,params)}return this.configuration.sync&&this._syncDuration(),this}remove(object){if(object.isSkinnedMesh)this._removeMesh(object);else if(object.isCamera)this._clearCamera(object);else{if("Audio"!==object.type)throw new Error("THREE.MMDAnimationHelper.remove: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.");this._clearAudio(object)}return this.configuration.sync&&this._syncDuration(),this}update(delta){null!==this.audioManager&&this.audioManager.control(delta);for(let i=0;i<this.meshes.length;i++)this._animateMesh(this.meshes[i],delta);return this.sharedPhysics&&this._updateSharedPhysics(delta),null!==this.camera&&this._animateCamera(this.camera,delta),this}pose(mesh,vpd,params={}){!1!==params.resetPose&&mesh.pose();const bones=mesh.skeleton.bones,boneParams=vpd.bones,boneNameDictionary={};for(let i=0,il=bones.length;i<il;i++)boneNameDictionary[bones[i].name]=i;const vector=new THREE.Vector3,quaternion=new THREE.Quaternion;for(let i=0,il=boneParams.length;i<il;i++){const boneParam=boneParams[i],boneIndex=boneNameDictionary[boneParam.name];if(void 0===boneIndex)continue;const bone=bones[boneIndex];bone.position.add(vector.fromArray(boneParam.translation)),bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion))}if(mesh.updateMatrixWorld(!0),this.configuration.pmxAnimation&&mesh.geometry.userData.MMD&&"pmx"===mesh.geometry.userData.MMD.format){const sortedBonesData=this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice()),ikSolver=!1!==params.ik?this._createCCDIKSolver(mesh):null,grantSolver=!1!==params.grant?this.createGrantSolver(mesh):null;this._animatePMXMesh(mesh,sortedBonesData,ikSolver,grantSolver)}else!1!==params.ik&&this._createCCDIKSolver(mesh).update(),!1!==params.grant&&this.createGrantSolver(mesh).update();return this}enable(key,enabled){if(void 0===this.enabled[key])throw new Error("THREE.MMDAnimationHelper.enable: unknown key "+key);if(this.enabled[key]=enabled,"physics"===key)for(let i=0,il=this.meshes.length;i<il;i++)this._optimizeIK(this.meshes[i],enabled);return this}createGrantSolver(mesh){return new GrantSolver(mesh,mesh.geometry.userData.MMD.grants)}_addMesh(mesh,params){if(this.meshes.indexOf(mesh)>=0)throw new Error("THREE.MMDAnimationHelper._addMesh: SkinnedMesh '"+mesh.name+"' has already been added.");return this.meshes.push(mesh),this.objects.set(mesh,{looped:!1}),this._setupMeshAnimation(mesh,params.animation),!1!==params.physics&&this._setupMeshPhysics(mesh,params),this}_setupCamera(camera,params){if(this.camera===camera)throw new Error("THREE.MMDAnimationHelper._setupCamera: Camera '"+camera.name+"' has already been set.");return this.camera&&this.clearCamera(this.camera),this.camera=camera,camera.add(this.cameraTarget),this.objects.set(camera,{}),void 0!==params.animation&&this._setupCameraAnimation(camera,params.animation),this}_setupAudio(audio,params){if(this.audio===audio)throw new Error("THREE.MMDAnimationHelper._setupAudio: Audio '"+audio.name+"' has already been set.");return this.audio&&this.clearAudio(this.audio),this.audio=audio,this.audioManager=new AudioManager(audio,params),this.objects.set(this.audioManager,{duration:this.audioManager.duration}),this}_removeMesh(mesh){let found=!1,writeIndex=0;for(let i=0,il=this.meshes.length;i<il;i++)this.meshes[i]!==mesh?this.meshes[writeIndex++]=this.meshes[i]:(this.objects.delete(mesh),found=!0);if(!found)throw new Error("THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '"+mesh.name+"' has not been added yet.");return this.meshes.length=writeIndex,this}_clearCamera(camera){if(camera!==this.camera)throw new Error("THREE.MMDAnimationHelper._clearCamera: Camera '"+camera.name+"' has not been set yet.");return this.camera.remove(this.cameraTarget),this.objects.delete(this.camera),this.camera=null,this}_clearAudio(audio){if(audio!==this.audio)throw new Error("THREE.MMDAnimationHelper._clearAudio: Audio '"+audio.name+"' has not been set yet.");return this.objects.delete(this.audioManager),this.audio=null,this.audioManager=null,this}_setupMeshAnimation(mesh,animation){const objects=this.objects.get(mesh);if(void 0!==animation){const animations=Array.isArray(animation)?animation:[animation];objects.mixer=new THREE.AnimationMixer(mesh);for(let i=0,il=animations.length;i<il;i++)objects.mixer.clipAction(animations[i]).play();objects.mixer.addEventListener("loop",(function(event){const tracks=event.action._clip.tracks;tracks.length>0&&".bones"!==tracks[0].name.slice(0,6)||(objects.looped=!0)}))}return objects.ikSolver=this._createCCDIKSolver(mesh),objects.grantSolver=this.createGrantSolver(mesh),this}_setupCameraAnimation(camera,animation){const animations=Array.isArray(animation)?animation:[animation],objects=this.objects.get(camera);objects.mixer=new THREE.AnimationMixer(camera);for(let i=0,il=animations.length;i<il;i++)objects.mixer.clipAction(animations[i]).play()}_setupMeshPhysics(mesh,params){const objects=this.objects.get(mesh);if(void 0===params.world&&this.sharedPhysics){const masterPhysics=this._getMasterPhysics();null!==masterPhysics&&(world=masterPhysics.world)}objects.physics=this._createMMDPhysics(mesh,params),objects.mixer&&!1!==params.animationWarmup&&(this._animateMesh(mesh,0),objects.physics.reset()),objects.physics.warmup(void 0!==params.warmup?params.warmup:60),this._optimizeIK(mesh,!0)}_animateMesh(mesh,delta){const objects=this.objects.get(mesh),mixer=objects.mixer,ikSolver=objects.ikSolver,grantSolver=objects.grantSolver,physics=objects.physics,looped=objects.looped;mixer&&this.enabled.animation&&(this._restoreBones(mesh),mixer.update(delta),this._saveBones(mesh),this.configuration.pmxAnimation&&mesh.geometry.userData.MMD&&"pmx"===mesh.geometry.userData.MMD.format?(objects.sortedBonesData||(objects.sortedBonesData=this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice())),this._animatePMXMesh(mesh,objects.sortedBonesData,ikSolver&&this.enabled.ik?ikSolver:null,grantSolver&&this.enabled.grant?grantSolver:null)):(ikSolver&&this.enabled.ik&&(mesh.updateMatrixWorld(!0),ikSolver.update()),grantSolver&&this.enabled.grant&&grantSolver.update())),!0===looped&&this.enabled.physics&&(physics&&this.configuration.resetPhysicsOnLoop&&physics.reset(),objects.looped=!1),physics&&this.enabled.physics&&!this.sharedPhysics&&(this.onBeforePhysics(mesh),physics.update(delta))}_sortBoneDataArray(boneDataArray){return boneDataArray.sort((function(a,b){return a.transformationClass!==b.transformationClass?a.transformationClass-b.transformationClass:a.index-b.index}))}_animatePMXMesh(mesh,sortedBonesData,ikSolver,grantSolver){_quaternionIndex=0,_grantResultMap.clear();for(let i=0,il=sortedBonesData.length;i<il;i++)updateOne(mesh,sortedBonesData[i].index,ikSolver,grantSolver);return mesh.updateMatrixWorld(!0),this}_animateCamera(camera,delta){const mixer=this.objects.get(camera).mixer;mixer&&this.enabled.cameraAnimation&&(mixer.update(delta),camera.updateProjectionMatrix(),camera.up.set(0,1,0),camera.up.applyQuaternion(camera.quaternion),camera.lookAt(this.cameraTarget.position))}_optimizeIK(mesh,physicsEnabled){const iks=mesh.geometry.userData.MMD.iks,bones=mesh.geometry.userData.MMD.bones;for(let i=0,il=iks.length;i<il;i++){const ik=iks[i],links=ik.links;for(let j=0,jl=links.length;j<jl;j++){const link=links[j];link.enabled=!0!==physicsEnabled||!(bones[link.index].rigidBodyType>0)}}}_createCCDIKSolver(mesh){if(void 0===THREE.CCDIKSolver)throw new Error("THREE.MMDAnimationHelper: Import THREE.CCDIKSolver.");return new THREE.CCDIKSolver(mesh,mesh.geometry.userData.MMD.iks)}_createMMDPhysics(mesh,params){if(void 0===THREE.MMDPhysics)throw new Error("THREE.MMDPhysics: Import THREE.MMDPhysics.");return new THREE.MMDPhysics(mesh,mesh.geometry.userData.MMD.rigidBodies,mesh.geometry.userData.MMD.constraints,params)}_syncDuration(){let max=0;const objects=this.objects,meshes=this.meshes,camera=this.camera,audioManager=this.audioManager;for(let i=0,il=meshes.length;i<il;i++){const mixer=this.objects.get(meshes[i]).mixer;if(void 0!==mixer)for(let j=0;j<mixer._actions.length;j++){const clip=mixer._actions[j]._clip;objects.has(clip)||objects.set(clip,{duration:clip.duration}),max=Math.max(max,objects.get(clip).duration)}}if(null!==camera){const mixer=this.objects.get(camera).mixer;if(void 0!==mixer)for(let i=0,il=mixer._actions.length;i<il;i++){const clip=mixer._actions[i]._clip;objects.has(clip)||objects.set(clip,{duration:clip.duration}),max=Math.max(max,objects.get(clip).duration)}}null!==audioManager&&(max=Math.max(max,objects.get(audioManager).duration)),max+=this.configuration.afterglow;for(let i=0,il=this.meshes.length;i<il;i++){const mixer=this.objects.get(this.meshes[i]).mixer;if(void 0!==mixer)for(let j=0,jl=mixer._actions.length;j<jl;j++)mixer._actions[j]._clip.duration=max}if(null!==camera){const mixer=this.objects.get(camera).mixer;if(void 0!==mixer)for(let i=0,il=mixer._actions.length;i<il;i++)mixer._actions[i]._clip.duration=max}null!==audioManager&&(audioManager.duration=max)}_updatePropertyMixersBuffer(mesh){const mixer=this.objects.get(mesh).mixer,propertyMixers=mixer._bindings,accuIndex=mixer._accuIndex;for(let i=0,il=propertyMixers.length;i<il;i++){const propertyMixer=propertyMixers[i],buffer=propertyMixer.buffer,stride=propertyMixer.valueSize,offset=(accuIndex+1)*stride;propertyMixer.binding.getValue(buffer,offset)}}_saveBones(mesh){const objects=this.objects.get(mesh),bones=mesh.skeleton.bones;let backupBones=objects.backupBones;void 0===backupBones&&(backupBones=new Float32Array(7*bones.length),objects.backupBones=backupBones);for(let i=0,il=bones.length;i<il;i++){const bone=bones[i];bone.position.toArray(backupBones,7*i),bone.quaternion.toArray(backupBones,7*i+3)}}_restoreBones(mesh){const objects=this.objects.get(mesh),backupBones=objects.backupBones;if(void 0===backupBones)return;const bones=mesh.skeleton.bones;for(let i=0,il=bones.length;i<il;i++){const bone=bones[i];bone.position.fromArray(backupBones,7*i),bone.quaternion.fromArray(backupBones,7*i+3)}}_getMasterPhysics(){if(null!==this.masterPhysics)return this.masterPhysics;for(let i=0,il=this.meshes.length;i<il;i++){const physics=this.meshes[i].physics;if(null!=physics)return this.masterPhysics=physics,this.masterPhysics}return null}_updateSharedPhysics(delta){if(0===this.meshes.length||!this.enabled.physics||!this.sharedPhysics)return;const physics=this._getMasterPhysics();if(null!==physics){for(let i=0,il=this.meshes.length;i<il;i++){const p=this.meshes[i].physics;null!=p&&p.updateRigidBodies()}physics.stepSimulation(delta);for(let i=0,il=this.meshes.length;i<il;i++){const p=this.meshes[i].physics;null!=p&&p.updateBones()}}}}const _quaternions=[];let _quaternionIndex=0;function getQuaternion(){return _quaternionIndex>=_quaternions.length&&_quaternions.push(new THREE.Quaternion),_quaternions[_quaternionIndex++]}const _grantResultMap=new Map;function updateOne(mesh,boneIndex,ikSolver,grantSolver){const bones=mesh.skeleton.bones,bonesData=mesh.geometry.userData.MMD.bones,boneData=bonesData[boneIndex],bone=bones[boneIndex];if(_grantResultMap.has(boneIndex))return;const quaternion=getQuaternion();if(_grantResultMap.set(boneIndex,quaternion.copy(bone.quaternion)),grantSolver&&boneData.grant&&!boneData.grant.isLocal&&boneData.grant.affectRotation){const parentIndex=boneData.grant.parentIndex,ratio=boneData.grant.ratio;_grantResultMap.has(parentIndex)||updateOne(mesh,parentIndex,ikSolver,grantSolver),grantSolver.addGrantRotation(bone,_grantResultMap.get(parentIndex),ratio)}if(ikSolver&&boneData.ik){mesh.updateMatrixWorld(!0),ikSolver.updateOne(boneData.ik);const links=boneData.ik.links;for(let i=0,il=links.length;i<il;i++){const link=links[i];if(!1===link.enabled)continue;const linkIndex=link.index;_grantResultMap.has(linkIndex)&&_grantResultMap.set(linkIndex,_grantResultMap.get(linkIndex).copy(bones[linkIndex].quaternion))}}quaternion.copy(bone.quaternion)}class AudioManager{constructor(audio,params={}){this.audio=audio,this.elapsedTime=0,this.currentTime=0,this.delayTime=void 0!==params.delayTime?params.delayTime:0,this.audioDuration=this.audio.buffer.duration,this.duration=this.audioDuration+this.delayTime}control(delta){return this.elapsed+=delta,this.currentTime+=delta,this._shouldStopAudio()&&this.audio.stop(),this._shouldStartAudio()&&this.audio.play(),this}_shouldStartAudio(){if(this.audio.isPlaying)return!1;for(;this.currentTime>=this.duration;)this.currentTime-=this.duration;return!(this.currentTime<this.delayTime)&&!(this.currentTime-this.delayTime>this.audioDuration)}_shouldStopAudio(){return this.audio.isPlaying&&this.currentTime>=this.duration}}const _q=new THREE.Quaternion;class GrantSolver{constructor(mesh,grants=[]){this.mesh=mesh,this.grants=grants}update(){const grants=this.grants;for(let i=0,il=grants.length;i<il;i++)this.updateOne(grants[i]);return this}updateOne(grant){const bones=this.mesh.skeleton.bones,bone=bones[grant.index],parentBone=bones[grant.parentIndex];return grant.isLocal?(grant.affectPosition,grant.affectRotation):(grant.affectPosition,grant.affectRotation&&this.addGrantRotation(bone,parentBone.quaternion,grant.ratio)),this}addGrantRotation(bone,q,ratio){return _q.set(0,0,0,1),_q.slerp(q,ratio),bone.quaternion.multiply(_q),this}}THREE.MMDAnimationHelper=MMDAnimationHelper}();