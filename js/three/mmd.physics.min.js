!function(){class MMDPhysics{constructor(mesh,rigidBodyParams,constraintParams=[],params={}){if("undefined"==typeof Ammo)throw new Error("THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js");this.manager=new ResourceManager,this.mesh=mesh,this.unitStep=void 0!==params.unitStep?params.unitStep:1/65,this.maxStepNum=void 0!==params.maxStepNum?params.maxStepNum:3,this.gravity=new THREE.Vector3(0,-98,0),void 0!==params.gravity&&this.gravity.copy(params.gravity),this.world=void 0!==params.world?params.world:null,this.bodies=[],this.constraints=[],this._init(mesh,rigidBodyParams,constraintParams)}update(delta){const manager=this.manager,mesh=this.mesh;let isNonDefaultScale=!1;const position=manager.allocThreeVector3(),quaternion=manager.allocThreeQuaternion(),scale=manager.allocThreeVector3();let parent;return mesh.matrixWorld.decompose(position,quaternion,scale),1===scale.x&&1===scale.y&&1===scale.z||(isNonDefaultScale=!0),isNonDefaultScale&&(parent=mesh.parent,null!==parent&&(mesh.parent=null),scale.copy(this.mesh.scale),mesh.scale.set(1,1,1),mesh.updateMatrixWorld(!0)),this._updateRigidBodies(),this._stepSimulation(delta),this._updateBones(),isNonDefaultScale&&(null!==parent&&(mesh.parent=parent),mesh.scale.copy(scale)),manager.freeThreeVector3(scale),manager.freeThreeQuaternion(quaternion),manager.freeThreeVector3(position),this}reset(){for(let i=0,il=this.bodies.length;i<il;i++)this.bodies[i].reset();return this}warmup(cycles){for(let i=0;i<cycles;i++)this.update(1/60);return this}setGravity(gravity){return this.world.setGravity(new Ammo.btVector3(gravity.x,gravity.y,gravity.z)),this.gravity.copy(gravity),this}createHelper(){return new MMDPhysicsHelper(this.mesh,this)}_init(mesh,rigidBodyParams,constraintParams){const manager=this.manager,parent=mesh.parent;null!==parent&&(mesh.parent=null);const currentPosition=manager.allocThreeVector3(),currentQuaternion=manager.allocThreeQuaternion(),currentScale=manager.allocThreeVector3();currentPosition.copy(mesh.position),currentQuaternion.copy(mesh.quaternion),currentScale.copy(mesh.scale),mesh.position.set(0,0,0),mesh.quaternion.set(0,0,0,1),mesh.scale.set(1,1,1),mesh.updateMatrixWorld(!0),null===this.world&&(this.world=this._createWorld(),this.setGravity(this.gravity)),this._initRigidBodies(rigidBodyParams),this._initConstraints(constraintParams),null!==parent&&(mesh.parent=parent),mesh.position.copy(currentPosition),mesh.quaternion.copy(currentQuaternion),mesh.scale.copy(currentScale),mesh.updateMatrixWorld(!0),this.reset(),manager.freeThreeVector3(currentPosition),manager.freeThreeQuaternion(currentQuaternion),manager.freeThreeVector3(currentScale)}_createWorld(){const config=new Ammo.btDefaultCollisionConfiguration,dispatcher=new Ammo.btCollisionDispatcher(config),cache=new Ammo.btDbvtBroadphase,solver=new Ammo.btSequentialImpulseConstraintSolver,world=new Ammo.btDiscreteDynamicsWorld(dispatcher,cache,solver,config);return world}_initRigidBodies(rigidBodies){for(let i=0,il=rigidBodies.length;i<il;i++)this.bodies.push(new RigidBody(this.mesh,this.world,rigidBodies[i],this.manager))}_initConstraints(constraints){for(let i=0,il=constraints.length;i<il;i++){const params=constraints[i],bodyA=this.bodies[params.rigidBodyIndex1],bodyB=this.bodies[params.rigidBodyIndex2];this.constraints.push(new Constraint(this.mesh,this.world,bodyA,bodyB,params,this.manager))}}_stepSimulation(delta){const unitStep=this.unitStep;let stepTime=delta,maxStepNum=1+(delta/unitStep|0);stepTime<unitStep&&(stepTime=unitStep,maxStepNum=1),maxStepNum>this.maxStepNum&&(maxStepNum=this.maxStepNum),this.world.stepSimulation(stepTime,maxStepNum,unitStep)}_updateRigidBodies(){for(let i=0,il=this.bodies.length;i<il;i++)this.bodies[i].updateFromBone()}_updateBones(){for(let i=0,il=this.bodies.length;i<il;i++)this.bodies[i].updateBone()}}class ResourceManager{constructor(){this.threeVector3s=[],this.threeMatrix4s=[],this.threeQuaternions=[],this.threeEulers=[],this.transforms=[],this.quaternions=[],this.vector3s=[]}allocThreeVector3(){return this.threeVector3s.length>0?this.threeVector3s.pop():new THREE.Vector3}freeThreeVector3(v){this.threeVector3s.push(v)}allocThreeMatrix4(){return this.threeMatrix4s.length>0?this.threeMatrix4s.pop():new THREE.Matrix4}freeThreeMatrix4(m){this.threeMatrix4s.push(m)}allocThreeQuaternion(){return this.threeQuaternions.length>0?this.threeQuaternions.pop():new THREE.Quaternion}freeThreeQuaternion(q){this.threeQuaternions.push(q)}allocThreeEuler(){return this.threeEulers.length>0?this.threeEulers.pop():new THREE.Euler}freeThreeEuler(e){this.threeEulers.push(e)}allocTransform(){return this.transforms.length>0?this.transforms.pop():new Ammo.btTransform}freeTransform(t){this.transforms.push(t)}allocQuaternion(){return this.quaternions.length>0?this.quaternions.pop():new Ammo.btQuaternion}freeQuaternion(q){this.quaternions.push(q)}allocVector3(){return this.vector3s.length>0?this.vector3s.pop():new Ammo.btVector3}freeVector3(v){this.vector3s.push(v)}setIdentity(t){t.setIdentity()}getBasis(t){var q=this.allocQuaternion();return t.getBasis().getRotation(q),q}getBasisAsMatrix3(t){var q=this.getBasis(t),m=this.quaternionToMatrix3(q);return this.freeQuaternion(q),m}getOrigin(t){return t.getOrigin()}setOrigin(t,v){t.getOrigin().setValue(v.x(),v.y(),v.z())}copyOrigin(t1,t2){var o=t2.getOrigin();this.setOrigin(t1,o)}setBasis(t,q){t.setRotation(q)}setBasisFromMatrix3(t,m){var q=this.matrix3ToQuaternion(m);this.setBasis(t,q),this.freeQuaternion(q)}setOriginFromArray3(t,a){t.getOrigin().setValue(a[0],a[1],a[2])}setOriginFromThreeVector3(t,v){t.getOrigin().setValue(v.x,v.y,v.z)}setBasisFromArray3(t,a){var thQ=this.allocThreeQuaternion(),thE=this.allocThreeEuler();thE.set(a[0],a[1],a[2]),this.setBasisFromThreeQuaternion(t,thQ.setFromEuler(thE)),this.freeThreeEuler(thE),this.freeThreeQuaternion(thQ)}setBasisFromThreeQuaternion(t,a){var q=this.allocQuaternion();q.setX(a.x),q.setY(a.y),q.setZ(a.z),q.setW(a.w),this.setBasis(t,q),this.freeQuaternion(q)}multiplyTransforms(t1,t2){var t=this.allocTransform();this.setIdentity(t);var m1=this.getBasisAsMatrix3(t1),m2=this.getBasisAsMatrix3(t2),o1=this.getOrigin(t1),o2=this.getOrigin(t2),v1=this.multiplyMatrix3ByVector3(m1,o2),v2=this.addVector3(v1,o1);this.setOrigin(t,v2);var m3=this.multiplyMatrices3(m1,m2);return this.setBasisFromMatrix3(t,m3),this.freeVector3(v1),this.freeVector3(v2),t}inverseTransform(t){var t2=this.allocTransform(),m1=this.getBasisAsMatrix3(t),o=this.getOrigin(t),m2=this.transposeMatrix3(m1),v1=this.negativeVector3(o),v2=this.multiplyMatrix3ByVector3(m2,v1);return this.setOrigin(t2,v2),this.setBasisFromMatrix3(t2,m2),this.freeVector3(v1),this.freeVector3(v2),t2}multiplyMatrices3(m1,m2){var m3=[],v10=this.rowOfMatrix3(m1,0),v11=this.rowOfMatrix3(m1,1),v12=this.rowOfMatrix3(m1,2),v20=this.columnOfMatrix3(m2,0),v21=this.columnOfMatrix3(m2,1),v22=this.columnOfMatrix3(m2,2);return m3[0]=this.dotVectors3(v10,v20),m3[1]=this.dotVectors3(v10,v21),m3[2]=this.dotVectors3(v10,v22),m3[3]=this.dotVectors3(v11,v20),m3[4]=this.dotVectors3(v11,v21),m3[5]=this.dotVectors3(v11,v22),m3[6]=this.dotVectors3(v12,v20),m3[7]=this.dotVectors3(v12,v21),m3[8]=this.dotVectors3(v12,v22),this.freeVector3(v10),this.freeVector3(v11),this.freeVector3(v12),this.freeVector3(v20),this.freeVector3(v21),this.freeVector3(v22),m3}addVector3(v1,v2){var v=this.allocVector3();return v.setValue(v1.x()+v2.x(),v1.y()+v2.y(),v1.z()+v2.z()),v}dotVectors3(v1,v2){return v1.x()*v2.x()+v1.y()*v2.y()+v1.z()*v2.z()}rowOfMatrix3(m,i){var v=this.allocVector3();return v.setValue(m[3*i+0],m[3*i+1],m[3*i+2]),v}columnOfMatrix3(m,i){var v=this.allocVector3();return v.setValue(m[i+0],m[i+3],m[i+6]),v}negativeVector3(v){var v2=this.allocVector3();return v2.setValue(-v.x(),-v.y(),-v.z()),v2}multiplyMatrix3ByVector3(m,v){var v4=this.allocVector3(),v0=this.rowOfMatrix3(m,0),v1=this.rowOfMatrix3(m,1),v2=this.rowOfMatrix3(m,2),x=this.dotVectors3(v0,v),y=this.dotVectors3(v1,v),z=this.dotVectors3(v2,v);return v4.setValue(x,y,z),this.freeVector3(v0),this.freeVector3(v1),this.freeVector3(v2),v4}transposeMatrix3(m){var m2=[];return m2[0]=m[0],m2[1]=m[3],m2[2]=m[6],m2[3]=m[1],m2[4]=m[4],m2[5]=m[7],m2[6]=m[2],m2[7]=m[5],m2[8]=m[8],m2}quaternionToMatrix3(q){var m=[],x=q.x(),y=q.y(),z=q.z(),w=q.w(),xx=x*x,yy=y*y,zz=z*z,xy=x*y,yz=y*z,zx=z*x,xw=x*w,yw=y*w,zw=z*w;return m[0]=1-2*(yy+zz),m[1]=2*(xy-zw),m[2]=2*(zx+yw),m[3]=2*(xy+zw),m[4]=1-2*(zz+xx),m[5]=2*(yz-xw),m[6]=2*(zx-yw),m[7]=2*(yz+xw),m[8]=1-2*(xx+yy),m}matrix3ToQuaternion(m){var t=m[0]+m[4]+m[8],s,x,y,z,w;t>0?(w=.25*(s=2*Math.sqrt(t+1)),x=(m[7]-m[5])/s,y=(m[2]-m[6])/s,z=(m[3]-m[1])/s):m[0]>m[4]&&m[0]>m[8]?(s=2*Math.sqrt(1+m[0]-m[4]-m[8]),w=(m[7]-m[5])/s,x=.25*s,y=(m[1]+m[3])/s,z=(m[2]+m[6])/s):m[4]>m[8]?(s=2*Math.sqrt(1+m[4]-m[0]-m[8]),w=(m[2]-m[6])/s,x=(m[1]+m[3])/s,y=.25*s,z=(m[5]+m[7])/s):(s=2*Math.sqrt(1+m[8]-m[0]-m[4]),w=(m[3]-m[1])/s,x=(m[2]+m[6])/s,y=(m[5]+m[7])/s,z=.25*s);var q=this.allocQuaternion();return q.setX(x),q.setY(y),q.setZ(z),q.setW(w),q}}class RigidBody{constructor(mesh,world,params,manager){this.mesh=mesh,this.world=world,this.params=params,this.manager=manager,this.body=null,this.bone=null,this.boneOffsetForm=null,this.boneOffsetFormInverse=null,this._init()}reset(){return this._setTransformFromBone(),this}updateFromBone(){return-1!==this.params.boneIndex&&0===this.params.type&&this._setTransformFromBone(),this}updateBone(){return 0===this.params.type||-1===this.params.boneIndex?this:(this._updateBoneRotation(),1===this.params.type&&this._updateBonePosition(),this.bone.updateMatrixWorld(!0),2===this.params.type&&this._setPositionFromBone(),this)}_init(){function generateShape(p){switch(p.shapeType){case 0:return new Ammo.btSphereShape(p.width);case 1:return new Ammo.btBoxShape(new Ammo.btVector3(p.width,p.height,p.depth));case 2:return new Ammo.btCapsuleShape(p.width,p.height);default:throw new Error("unknown shape type "+p.shapeType)}}const manager=this.manager,params=this.params,bones=this.mesh.skeleton.bones,bone=-1===params.boneIndex?new THREE.Bone:bones[params.boneIndex],shape=generateShape(params),weight=0===params.type?0:params.weight,localInertia=manager.allocVector3();localInertia.setValue(0,0,0),0!==weight&&shape.calculateLocalInertia(weight,localInertia);const boneOffsetForm=manager.allocTransform();manager.setIdentity(boneOffsetForm),manager.setOriginFromArray3(boneOffsetForm,params.position),manager.setBasisFromArray3(boneOffsetForm,params.rotation);const vector=manager.allocThreeVector3(),boneForm=manager.allocTransform();manager.setIdentity(boneForm),manager.setOriginFromThreeVector3(boneForm,bone.getWorldPosition(vector));const form=manager.multiplyTransforms(boneForm,boneOffsetForm),state=new Ammo.btDefaultMotionState(form),info=new Ammo.btRigidBodyConstructionInfo(weight,state,shape,localInertia);info.set_m_friction(params.friction),info.set_m_restitution(params.restitution);const body=new Ammo.btRigidBody(info);0===params.type&&(body.setCollisionFlags(2|body.getCollisionFlags()),body.setActivationState(4)),body.setDamping(params.positionDamping,params.rotationDamping),body.setSleepingThresholds(0,0),this.world.addRigidBody(body,1<<params.groupIndex,params.groupTarget),this.body=body,this.bone=bone,this.boneOffsetForm=boneOffsetForm,this.boneOffsetFormInverse=manager.inverseTransform(boneOffsetForm),manager.freeVector3(localInertia),manager.freeTransform(form),manager.freeTransform(boneForm),manager.freeThreeVector3(vector)}_getBoneTransform(){const manager=this.manager,p=manager.allocThreeVector3(),q=manager.allocThreeQuaternion(),s=manager.allocThreeVector3();this.bone.matrixWorld.decompose(p,q,s);const tr=manager.allocTransform();manager.setOriginFromThreeVector3(tr,p),manager.setBasisFromThreeQuaternion(tr,q);const form=manager.multiplyTransforms(tr,this.boneOffsetForm);return manager.freeTransform(tr),manager.freeThreeVector3(s),manager.freeThreeQuaternion(q),manager.freeThreeVector3(p),form}_getWorldTransformForBone(){const manager=this.manager,tr=this.body.getCenterOfMassTransform();return manager.multiplyTransforms(tr,this.boneOffsetFormInverse)}_setTransformFromBone(){const manager=this.manager,form=this._getBoneTransform();this.body.setCenterOfMassTransform(form),this.body.getMotionState().setWorldTransform(form),manager.freeTransform(form)}_setPositionFromBone(){const manager=this.manager,form=this._getBoneTransform(),tr=manager.allocTransform();this.body.getMotionState().getWorldTransform(tr),manager.copyOrigin(tr,form),this.body.setCenterOfMassTransform(tr),this.body.getMotionState().setWorldTransform(tr),manager.freeTransform(tr),manager.freeTransform(form)}_updateBoneRotation(){const manager=this.manager,tr=this._getWorldTransformForBone(),q=manager.getBasis(tr),thQ=manager.allocThreeQuaternion(),thQ2=manager.allocThreeQuaternion(),thQ3=manager.allocThreeQuaternion();thQ.set(q.x(),q.y(),q.z(),q.w()),thQ2.setFromRotationMatrix(this.bone.matrixWorld),thQ2.conjugate(),thQ2.multiply(thQ),thQ3.setFromRotationMatrix(this.bone.matrix),this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize()),manager.freeThreeQuaternion(thQ),manager.freeThreeQuaternion(thQ2),manager.freeThreeQuaternion(thQ3),manager.freeQuaternion(q),manager.freeTransform(tr)}_updateBonePosition(){const manager=this.manager,tr=this._getWorldTransformForBone(),thV=manager.allocThreeVector3(),o=manager.getOrigin(tr);thV.set(o.x(),o.y(),o.z()),this.bone.parent&&this.bone.parent.worldToLocal(thV),this.bone.position.copy(thV),manager.freeThreeVector3(thV),manager.freeTransform(tr)}}class Constraint{constructor(mesh,world,bodyA,bodyB,params,manager){this.mesh=mesh,this.world=world,this.bodyA=bodyA,this.bodyB=bodyB,this.params=params,this.manager=manager,this.constraint=null,this._init()}_init(){const manager=this.manager,params=this.params,bodyA=this.bodyA,bodyB=this.bodyB,form=manager.allocTransform();manager.setIdentity(form),manager.setOriginFromArray3(form,params.position),manager.setBasisFromArray3(form,params.rotation);const formA=manager.allocTransform(),formB=manager.allocTransform();bodyA.body.getMotionState().getWorldTransform(formA),bodyB.body.getMotionState().getWorldTransform(formB);const formInverseA=manager.inverseTransform(formA),formInverseB=manager.inverseTransform(formB),formA2=manager.multiplyTransforms(formInverseA,form),formB2=manager.multiplyTransforms(formInverseB,form),constraint=new Ammo.btGeneric6DofSpringConstraint(bodyA.body,bodyB.body,formA2,formB2,!0),lll=manager.allocVector3(),lul=manager.allocVector3(),all=manager.allocVector3(),aul=manager.allocVector3();lll.setValue(params.translationLimitation1[0],params.translationLimitation1[1],params.translationLimitation1[2]),lul.setValue(params.translationLimitation2[0],params.translationLimitation2[1],params.translationLimitation2[2]),all.setValue(params.rotationLimitation1[0],params.rotationLimitation1[1],params.rotationLimitation1[2]),aul.setValue(params.rotationLimitation2[0],params.rotationLimitation2[1],params.rotationLimitation2[2]),constraint.setLinearLowerLimit(lll),constraint.setLinearUpperLimit(lul),constraint.setAngularLowerLimit(all),constraint.setAngularUpperLimit(aul);for(let i=0;i<3;i++)0!==params.springPosition[i]&&(constraint.enableSpring(i,!0),constraint.setStiffness(i,params.springPosition[i]));for(let i=0;i<3;i++)0!==params.springRotation[i]&&(constraint.enableSpring(i+3,!0),constraint.setStiffness(i+3,params.springRotation[i]));if(void 0!==constraint.setParam)for(let i=0;i<6;i++)constraint.setParam(2,.475,i);this.world.addConstraint(constraint,!0),this.constraint=constraint,manager.freeTransform(form),manager.freeTransform(formA),manager.freeTransform(formB),manager.freeTransform(formInverseA),manager.freeTransform(formInverseB),manager.freeTransform(formA2),manager.freeTransform(formB2),manager.freeVector3(lll),manager.freeVector3(lul),manager.freeVector3(all),manager.freeVector3(aul)}}const _position=new THREE.Vector3,_quaternion=new THREE.Quaternion,_scale=new THREE.Vector3,_matrixWorldInv=new THREE.Matrix4;class MMDPhysicsHelper extends THREE.Object3D{constructor(mesh,physics){super(),this.root=mesh,this.physics=physics,this.matrix.copy(mesh.matrixWorld),this.matrixAutoUpdate=!1,this.materials=[],this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(16746632),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8978312),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8947967),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this._init()}dispose(){const materials=this.materials,children=this.children;for(let i=0;i<materials.length;i++)materials[i].dispose();for(let i=0;i<children.length;i++){const child=children[i];child.isMesh&&child.geometry.dispose()}}updateMatrixWorld(force){var mesh=this.root;if(this.visible){var bodies=this.physics.bodies;_matrixWorldInv.copy(mesh.matrixWorld).decompose(_position,_quaternion,_scale).compose(_position,_quaternion,_scale.set(1,1,1)).invert();for(var i=0,il=bodies.length;i<il;i++){var body=bodies[i].body,child=this.children[i],tr=body.getCenterOfMassTransform(),origin=tr.getOrigin(),rotation=tr.getRotation();child.position.set(origin.x(),origin.y(),origin.z()).applyMatrix4(_matrixWorldInv),child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(),rotation.y(),rotation.z(),rotation.w()))}}this.matrix.copy(mesh.matrixWorld).decompose(_position,_quaternion,_scale).compose(_position,_quaternion,_scale.set(1,1,1)),super.updateMatrixWorld(force)}_init(){var bodies=this.physics.bodies;function createGeometry(param){switch(param.shapeType){case 0:return new THREE.SphereGeometry(param.width,16,8);case 1:return new THREE.BoxGeometry(2*param.width,2*param.height,2*param.depth,8,8,8);case 2:return new THREE.CapsuleGeometry(param.width,param.height,8,16);default:return null}}for(var i=0,il=bodies.length;i<il;i++){var param=bodies[i].params;this.add(new THREE.Mesh(createGeometry(param),this.materials[param.type]))}}}THREE.MMDPhysics=MMDPhysics}();