THREE.OutlineEffect=function(renderer,parameters){parameters=parameters||{},this.enabled=!0;var defaultThickness=void 0!==parameters.defaultThickness?parameters.defaultThickness:.003,defaultColor=void 0!==parameters.defaultColor?parameters.defaultColor:new THREE.Color(0),defaultAlpha=void 0!==parameters.defaultAlpha?parameters.defaultAlpha:1,defaultKeepAlive=void 0!==parameters.defaultKeepAlive&&parameters.defaultKeepAlive,cache={},removeThresholdCount=60,originalMaterials={},originalOnBeforeRenders={},invisibleMaterial=new THREE.ShaderMaterial({visible:!1}),shaderIDs={MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical"},uniformsChunk={outlineThickness:{type:"f",value:defaultThickness},outlineColor:{type:"c",value:defaultColor},outlineAlpha:{type:"f",value:defaultAlpha}},vertexShaderChunk=["#include <fog_pars_vertex>","uniform float outlineThickness;","vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {","\tfloat thickness = outlineThickness;","\tconst float ratio = 1.0;","\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );","\tvec4 norm = normalize( pos - pos2 );","\treturn pos + norm * thickness * pos.w * ratio;","}"].join("\n"),vertexShaderChunk2=["#if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( PHYSICAL )","\t#ifndef USE_ENVMAP","\t\tvec3 objectNormal = normalize( normal );","\t\t#ifdef FLIP_SIDED","\t\t\tobjectNormal = -objectNormal;","\t\t#endif","\t#endif","#endif","#ifdef DECLARE_TRANSFORMED","\tvec3 transformed = vec3( position );","#endif","#ifdef USE_SKINNING","\tgl_Position = calculateOutline( gl_Position, objectNormal, skinned );","#else","\tgl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );","#endif","#include <fog_vertex>"].join("\n"),fragmentShader=["#include <common>","#include <fog_pars_fragment>","uniform vec3 outlineColor;","uniform float outlineAlpha;","void main() {","\tgl_FragColor = vec4( outlineColor, outlineAlpha );","\t#include <fog_fragment>","}"].join("\n");function createMaterial(originalMaterial){var shaderID=shaderIDs[originalMaterial.type],originalUniforms,originalVertexShader,outlineParameters=originalMaterial.outlineParameters;if(void 0!==shaderID){var shader=THREE.ShaderLib[shaderID];originalUniforms=shader.uniforms,originalVertexShader=shader.vertexShader}else if(!0===originalMaterial.isRawShaderMaterial){if(originalUniforms=originalMaterial.uniforms,originalVertexShader=originalMaterial.vertexShader,!/attribute\s+vec3\s+position\s*;/.test(originalVertexShader)||!/attribute\s+vec3\s+normal\s*;/.test(originalVertexShader))return console.warn("THREE.OutlineEffect requires both vec3 position and normal attributes in vertex shader, does not draw outline for "+originalMaterial.name+"(uuid:"+originalMaterial.uuid+") material."),invisibleMaterial}else{if(!0!==originalMaterial.isShaderMaterial)return invisibleMaterial;originalUniforms=originalMaterial.uniforms,originalVertexShader=originalMaterial.vertexShader}var uniforms=Object.assign({},originalUniforms,uniformsChunk),vertexShader=originalVertexShader.replace(/void\s+main\s*\(\s*\)/,vertexShaderChunk+"\nvoid main()").replace(/\}\s*$/,vertexShaderChunk2+"\n}").replace(/#include\s+<[\w_]*light[\w_]*>/g,""),defines={},material;return/vec3\s+transformed\s*=/.test(originalVertexShader)||/#include\s+<begin_vertex>/.test(originalVertexShader)||(defines.DECLARE_TRANSFORMED=!0),new THREE.ShaderMaterial({defines:defines,uniforms:uniforms,vertexShader:vertexShader,fragmentShader:fragmentShader,side:THREE.BackSide,skinning:!1,morphTargets:!1,morphNormals:!1,fog:!1})}function createMultiMaterial(originalMaterial){for(var materials=[],i=0,il=originalMaterial.materials.length;i<il;i++)materials.push(createMaterial(originalMaterial.materials[i]));return new THREE.MultiMaterial(materials)}function setOutlineMaterial(object){if(void 0!==object.material){var data=cache[object.material.uuid];void 0===data&&(data={material:!0===object.material.isMultiMaterial?createMultiMaterial(object.material):createMaterial(object.material),used:!0,keepAlive:defaultKeepAlive,count:0},cache[object.material.uuid]=data);var outlineMaterial=data.material;data.used=!0;var uuid=outlineMaterial!==invisibleMaterial?outlineMaterial.uuid:object.uuid;if(originalMaterials[uuid]=object.material,!0===object.material.isMultiMaterial){for(var i=0,il=object.material.materials.length;i<il;i++)outlineMaterial.materials[i]!==invisibleMaterial&&(originalMaterials[outlineMaterial.materials[i].uuid]=object.material.materials[i]);updateOutlineMultiMaterial(outlineMaterial,object.material)}else updateOutlineMaterial(outlineMaterial,object.material);object.material=outlineMaterial,originalOnBeforeRenders[object.uuid]=object.onBeforeRender,object.onBeforeRender=onBeforeRender}}function restoreOriginalMaterial(object){if(void 0!==object.material){var originalMaterial=originalMaterials[object.material.uuid];void 0===originalMaterial&&void 0===(originalMaterial=originalMaterials[object.uuid])||(object.material=originalMaterial,object.onBeforeRender=originalOnBeforeRenders[object.uuid])}}function onBeforeRender(renderer,scene,camera,geometry,material,group){if(material!==invisibleMaterial&&!0!==material.isMultiMaterial){var originalMaterial=originalMaterials[material.uuid];void 0!==originalMaterial&&updateUniforms(material,originalMaterial)}}function updateUniforms(material,originalMaterial){var outlineParameters=originalMaterial.outlineParameters;material.uniforms.outlineAlpha.value=originalMaterial.opacity,void 0!==outlineParameters&&(void 0!==outlineParameters.thickness&&(material.uniforms.outlineThickness.value=outlineParameters.thickness),void 0!==outlineParameters.color&&material.uniforms.outlineColor.value.copy(outlineParameters.color),void 0!==outlineParameters.alpha&&(material.uniforms.outlineAlpha.value=outlineParameters.alpha))}function updateOutlineMaterial(material,originalMaterial){if(material!==invisibleMaterial){var outlineParameters=originalMaterial.outlineParameters;material.skinning=originalMaterial.skinning,material.morphTargets=originalMaterial.morphTargets,material.morphNormals=originalMaterial.morphNormals,material.fog=originalMaterial.fog,void 0!==outlineParameters?(!1===originalMaterial.visible?material.visible=!1:material.visible=void 0===outlineParameters.visible||outlineParameters.visible,material.transparent=void 0!==outlineParameters.alpha&&outlineParameters.alpha<1||originalMaterial.transparent,void 0!==outlineParameters.keepAlive&&void 0!==cache[originalMaterial.uuid]&&(cache[originalMaterial.uuid].keepAlive=outlineParameters.keepAlive)):(material.transparent=originalMaterial.transparent,material.visible=originalMaterial.visible),!0!==originalMaterial.wireframe&&!1!==originalMaterial.depthTest||(material.visible=!1)}}function updateOutlineMultiMaterial(material,originalMaterial){if(material!==invisibleMaterial){var outlineParameters=originalMaterial.outlineParameters;void 0!==outlineParameters?(!1===originalMaterial.visible?material.visible=!1:material.visible=void 0===outlineParameters.visible||outlineParameters.visible,void 0!==outlineParameters.keepAlive&&(cache[originalMaterial.uuid].keepAlive=outlineParameters.keepAlive)):material.visible=originalMaterial.visible;for(var i=0,il=material.materials.length;i<il;i++)updateOutlineMaterial(material.materials[i],originalMaterial.materials[i])}}function cleanupCache(){for(var keys,i=0,il=(keys=Object.keys(originalMaterials)).length;i<il;i++)originalMaterials[keys[i]]=void 0;for(var i=0,il=(keys=Object.keys(originalOnBeforeRenders)).length;i<il;i++)originalOnBeforeRenders[keys[i]]=void 0;for(var i=0,il=(keys=Object.keys(cache)).length;i<il;i++){var key=keys[i];!1===cache[key].used?(cache[key].count++,!1===cache[key].keepAlive&&cache[key].count>60&&delete cache[key]):(cache[key].used=!1,cache[key].count=0)}}this.render=function(scene,camera,renderTarget,forceClear){if(!1!==this.enabled){var currentAutoClear=renderer.autoClear;renderer.autoClear=this.autoClear,renderer.render(scene,camera,renderTarget,forceClear);var currentSceneAutoUpdate=scene.autoUpdate,currentSceneBackground=scene.background,currentShadowMapEnabled=renderer.shadowMap.enabled;scene.autoUpdate=!1,scene.background=null,renderer.autoClear=!1,renderer.shadowMap.enabled=!1,scene.traverse(setOutlineMaterial),renderer.render(scene,camera,renderTarget),scene.traverse(restoreOriginalMaterial),cleanupCache(),scene.autoUpdate=currentSceneAutoUpdate,scene.background=currentSceneBackground,renderer.autoClear=currentAutoClear,renderer.shadowMap.enabled=currentShadowMapEnabled}else renderer.render(scene,camera,renderTarget,forceClear)},this.autoClear=renderer.autoClear,this.domElement=renderer.domElement,this.shadowMap=renderer.shadowMap,this.clear=function(color,depth,stencil){renderer.clear(color,depth,stencil)},this.getPixelRatio=function(){return renderer.getPixelRatio()},this.setPixelRatio=function(value){renderer.setPixelRatio(value)},this.getSize=function(){return renderer.getSize()},this.setSize=function(width,height,updateStyle){renderer.setSize(width,height,updateStyle)},this.setViewport=function(x,y,width,height){renderer.setViewport(x,y,width,height)},this.setScissor=function(x,y,width,height){renderer.setScissor(x,y,width,height)},this.setScissorTest=function(boolean){renderer.setScissorTest(boolean)},this.setRenderTarget=function(renderTarget){renderer.setRenderTarget(renderTarget)}};