var dotScreenShader,composer,modelLoadFin,mouseY,cameraValue,renderer,camera,scene,gui,stats,directionalLight,control,group,panel,isMobile,isIOS,cameraZ,canvasjq,canvas,context,scaleLimit,stippleTimer;const CameraConfig={pc:{factor:55,scale:2700},mobile:{factor:15,scale:400}};async function enterPage(){initData(),initThree(),initDomComponent(),window.onresize=onWindowResize}function initData(){scaleLimit=1.2,isMobile=Utils.checkDeviceType(navigator.userAgent).isMobile,cameraValue=isMobile?CameraConfig.mobile:CameraConfig.pc}function initDomComponent(){panel=$("#main_view"),modelControler(window.innerWidth/2,window.innerHeight/2),isMobile?panel[0].addEventListener("touchstart",(function(e){modelControler(e.touches[0].clientX,e.touches[0].clientY)})):panel.mousemove((function(e){modelControler(e.clientX,e.clientY)}))}function modelControler(x,y){mouseY=y-window.innerHeight;let ca=camera.aspect<1?1:camera.aspect;cameraZ=ca<scaleLimit?(1-ca+mouseY/cameraValue.scale)*cameraValue.factor:(1-scaleLimit+mouseY/cameraValue.scale)*cameraValue.factor}function initThree(){initRender(),initScene(),initCamera(),initLight(),initModel(),postProcess(),rendererUpdate()}function postProcess(){composer=new THREE.EffectComposer(renderer);var renderPass=new THREE.RenderPass(scene,camera);composer.addPass(renderPass),(dotScreenShader=new THREE.ShaderPass(THREE.DotScreenShader)).uniforms.scale.value=.57,dotScreenShader.uniforms.angle.value=-1.1,dotScreenShader.uniforms.tSize.value=new THREE.Vector2(1024*camera.aspect,1024),composer.addPass(dotScreenShader);let brightnessContrastShader=new THREE.ShaderPass(THREE.BrightnessContrastShader);brightnessContrastShader.uniforms.brightness.value=.5,composer.addPass(brightnessContrastShader)}function initRender(){canvasjq=$("#m_canvas"),canvas=canvasjq[0],(renderer=new THREE.WebGLRenderer({antialias:!0,canvas:canvas})).setClearColor(16777215),renderer.setSize(window.innerWidth,window.innerHeight),canvasjq.css({float:"left",top:"0",left:"0",position:"absolute","z-index":"-10"})}function initCamera(){(camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,1e3)).aspect=window.innerWidth/window.innerHeight,camera.position.set(0,0,0),camera.lookAt(scene.position),cameraZ=camera.aspect<scaleLimit?(1-camera.aspect)*cameraValue.factor:(1-scaleLimit)*cameraValue.factor}function initScene(){scene=new THREE.Scene}function initLight(){scene.add(new THREE.AmbientLight("#ffffff"))}function initModel(){modelLoadFin=!1,group=new THREE.Group;var geometry=new THREE.BoxGeometry(18,18,18),material=new THREE.MeshLambertMaterial({color:13684944,wireframe:!1,transparent:!0,opacity:0}),box=new THREE.Mesh(geometry,material);group.add(box),box.position.set(0,-14.7,0),box.visible=!1;var mtlLoader=new THREE.MTLLoader;let path="./data/model/box_miku/";mtlLoader.setPath(path),mtlLoader.load("box_miku.mtl",(function(material){var objLoader=new THREE.OBJLoader;function setopacity(o,v,b){for(let i=0;i<o.children[0].material.length;i++){let m=o.children[0].material[i];b&&(m.transparent=!0),m.opacity=v}}material.transparent=!0,material.side=THREE.FrontSide,objLoader.setMaterials(material),objLoader.setPath(path),objLoader.load("box_miku.obj",(function(object){object.visible=!1,object.scale.set(3,3,3),object.transparent=!0,object.name="miku",group.add(object),object.position.set(0,-6,0);var t=new TWEEN.Tween(0).to(1,1e3).onUpdate((function(v){setopacity(object,v),box.material.opacity=v})).onComplete((function(){setopacity(object,1),box.material.opacity=1,t.stop()})).onStart((function(){setopacity(object,0,!0),object.visible=!0,box.material.opacity=0,box.visible=!0})).start();modelLoadFin=!0}),(function(event){}))})),scene.add(group),group.position.set(0,-10,-50)}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),composer.setSize(window.innerWidth,window.innerHeight),dotScreenShader.uniforms.tSize.value=new THREE.Vector2(1024*camera.aspect,1024);let ca=camera.aspect<1?1:camera.aspect;cameraZ=ca<scaleLimit?(1-ca+mouseY/cameraValue.scale)*cameraValue.factor:(1-scaleLimit+mouseY/cameraValue.scale)*cameraValue.factor}function rendererUpdate(){composer.render(),requestAnimationFrame(rendererUpdate),modelLoadFin&&(group.rotation.y+=.015),Math.abs(camera.position.z-cameraZ)>.01?camera.position.z=Utils.lerp(camera.position.z,cameraZ,.2):camera.position.z=cameraZ,TWEEN.update()}$(document).ready(()=>enterPage());